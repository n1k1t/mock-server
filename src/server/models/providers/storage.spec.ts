import { ProvidersStorage } from './storage';
import { MockServer } from '../../index';
import { Provider } from './model';

// Test generated using Keploy
test('extract returns all providers including default', () => {
  const mockServer = <MockServer>{};
  const storage = new ProvidersStorage(mockServer);
  const provider1 = Provider.build({ group: 'group1' });
  const provider2 = Provider.build({ group: 'group2' });

  storage.register(provider1);
  storage.register(provider2);

  const result = storage.extract();

  expect(result).toHaveLength(3); // Two registered + one default
  expect(result).toContainEqual(provider1);
  expect(result).toContainEqual(provider2);
  expect(result).toContainEqual(storage.default);
});

/* Generated by @n1k1t/unit-generator */
it('registers matching history entries to provider', () => {
  const storage = ProvidersStorage.build({} as MockServer<any, any>);
  const provider = Provider.build({ group: 'grp' });
  provider.storages.history = { register: jest.fn() } as any;
  const history = { group: 'grp', id: 'h1' } as any;
  storage.system.storages.history = { values: () => [history], delete: jest.fn() } as any;
  storage.register(provider);
  expect(provider.storages.history.register).toHaveBeenCalledWith(history);
});

/* Generated by @n1k1t/unit-generator */
it('does not register history when group mismatches', () => {
  const storage = ProvidersStorage.build({} as MockServer<any, any>);
  const provider = Provider.build({ group: 'grp2' });
  provider.storages.history = { register: jest.fn() } as any;
  const history = { group: 'other', id: 'h2' } as any;
  storage.system.storages.history = { values: () => [history], delete: jest.fn() } as any;
  storage.register(provider);
  expect(provider.storages.history.register).not.toHaveBeenCalled();
});

/* Generated by @n1k1t/unit-generator */
it('returns storage when registering default provider', () => {
  const storage = ProvidersStorage.build({} as MockServer<any, any>);
  expect(storage.register(storage.default)).toBe(storage);
});

/* Generated by @n1k1t/unit-generator */
it('should not overwrite existing provider when registering same group', () => {
  const server = {} as MockServer<any, any>;
  const storage = ProvidersStorage.build(server);
  const providerA = Provider.build({ group: 'g1' });
  const providerB = Provider.build({ group: 'g1' });
  storage.register(providerA);
  storage.register(providerB);
  expect(storage.get('g1')).toBe(providerA);
});
