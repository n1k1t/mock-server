import { Provider } from './model';

// Test generated using Keploy
describe('Provider', () => {
  it('should assign the server correctly', () => {
    const provider = Provider.build({ group: 'test-group' });
    const mockServer = {}; // Mock server object
    provider.assign({ server: <any>mockServer });
    expect(provider.server).toBe(mockServer);
  });
});

/* Generated by @n1k1t/unit-generator */
it('should assign the server property to the instance', () => {
  const provider = new Provider({ group: 'test-group' });
  const mockServer = {} as any;
  provider.assign({ server: mockServer });
  expect(provider.server).toBe(mockServer);
});

/* Generated by @n1k1t/unit-generator */
it('should return a new Provider instance', () => {
  const provider = Provider.build({ group: 'test-group' });
  expect(provider).toBeInstanceOf(Provider);
});

/* Generated by @n1k1t/unit-generator */
it('should set the group property correctly', () => {
  const groupName = 'test-group-1';
  const provider = Provider.build({ group: groupName });
  expect(provider.group).toBe(groupName);
});

/* Generated by @n1k1t/unit-generator */
it('should set the ttl property correctly when provided', () => {
  const ttlValue = 60;
  const provider = Provider.build({ group: 'test-group', ttl: ttlValue });
  expect(provider.ttl).toBe(ttlValue);
});

/* Generated by @n1k1t/unit-generator */
it('should set the ttl property to undefined when not provided', () => {
  const provider = Provider.build({ group: 'test-group' });
  expect(provider.ttl).toBeUndefined();
});

/* Generated by @n1k1t/unit-generator */
it('should calculate expiresAt correctly when ttl is provided', () => {
  const ttlValue = 60;
  const mockTimestamp = 1678886400000;
  const dateNowSpy = jest.spyOn(Date, 'now').mockReturnValue(mockTimestamp);

  const provider = Provider.build({ group: 'test-group', ttl: ttlValue });
  expect(provider.expiresAt).toBe(mockTimestamp + ttlValue * 1000);

  dateNowSpy.mockRestore();
});

/* Generated by @n1k1t/unit-generator */
it('should set expiresAt to Infinity when ttl is not provided', () => {
  const provider = Provider.build({ group: 'test-group' });
  expect(provider.expiresAt).toBe(Infinity);
});
